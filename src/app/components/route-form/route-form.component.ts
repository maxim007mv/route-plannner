import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { RouteService } from '../../services/route.service';
import { RouteData } from '../../models/route-data';

@Component({
  selector: 'app-route-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './route-form.component.html',
  styleUrls: ['./route-form.component.scss']
})
export class RouteFormComponent {
  routeForm!: FormGroup;
  isLoading = false;
  error: string | null = null;
  generatedRoute: RouteData | null = null;
  currentStep = 1;
  totalSteps = 6;

  companions = [
    { value: '–û–¥–∏–Ω', icon: 'üë§' },
    { value: '–° –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º', icon: 'üë´' },
    { value: '–° –¥—Ä—É–∑—å—è–º–∏', icon: 'üë•' },
    { value: '–° —Å–µ–º—å–µ–π', icon: 'üë®‚Äçüë©‚Äçüë¶' }
  ];

  interests = [
    { value: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'üèõÔ∏è' },
    { value: 'art', label: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { value: 'food', label: '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', icon: 'üçΩÔ∏è' },
    { value: 'nature', label: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üå≥' },
    { value: 'architecture', label: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', icon: 'üè∞' },
    { value: 'shopping', label: '–®–æ–ø–ø–∏–Ω–≥', icon: 'üõçÔ∏è' }
  ];

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private routeService: RouteService
  ) {
    this.initForm();
  }

  private initForm() {
    this.routeForm = this.fb.group({
      withWhom: ['', Validators.required],
      startTime: ['18:00', Validators.required],
      duration: ['3', Validators.required],
      interests: [[], [Validators.required, Validators.minLength(1)]],
      cafeBudget: ['budget', Validators.required],
      transportPreference: ['walking', Validators.required],
      additionalWishes: ['', [Validators.required, Validators.minLength(20)]],
      pace: ['moderate', Validators.required],
      accessibility: [false],
      avoidCrowds: [false]
    });
  }

  nextStep() {
    if (this.isCurrentStepValid()) {
      this.currentStep++;
    }
  }

  previousStep() {
    this.currentStep--;
  }

  isCurrentStepValid(): boolean {
    const stepControls = {
      1: ['withWhom'],
      2: ['startTime', 'duration'],
      3: ['interests'],
      4: ['cafeBudget', 'transportPreference'],
      5: ['pace', 'accessibility', 'avoidCrowds'],
      6: ['additionalWishes']
    };

    return stepControls[this.currentStep as keyof typeof stepControls]
      .every(control => this.routeForm.get(control)?.valid);
  }

  selectCompanion(value: string) {
    this.routeForm.patchValue({ withWhom: value });
  }

  toggleInterest(interest: string) {
    const currentInterests = this.routeForm.get('interests')?.value || [];
    const index = currentInterests.indexOf(interest);

    if (index === -1) {
      currentInterests.push(interest);
    } else {
      currentInterests.splice(index, 1);
    }

    this.routeForm.patchValue({ interests: currentInterests });
  }

  isFieldInvalid(fieldName: string): boolean {
    const field = this.routeForm.get(fieldName);
    return field ? (field.invalid && field.touched) : false;
  }

  async onSubmit() {
    if (this.routeForm.invalid) {
      this.error = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
      return;
    }

    this.isLoading = true;
    this.error = null;

    try {
      const formData = this.routeForm.value;
      this.generatedRoute = await this.routeService.generateRoute(formData);
    } catch (error: any) {
      console.error('Error generating route:', error);
      this.error = error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

      if (error.message.includes('–≤—Ä–µ–º–µ–Ω–Ω–æ')) {
        setTimeout(() => {
          this.error = null;
          this.onSubmit();
        }, 5000);
      }
    } finally {
      this.isLoading = false;
    }
  }

  resetForm() {
    this.generatedRoute = null;
    this.currentStep = 1;
    this.initForm();
  }

  goBack() {
    this.router.navigate(['/']);
  }

  getStepTitle(): string {
    const titles = {
      1: '–° –∫–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É?',
      2: '–ö–æ–≥–¥–∞ –∏ –∫–∞–∫ –¥–æ–ª–≥–æ?',
      3: '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      4: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ñ–µ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É',
      5: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è',
      6: '–§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏'
    };
    return titles[this.currentStep as keyof typeof titles];
  }
}
