import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { RouteData } from '../models/route-data';
import { environment } from '../../environments/environment';
import { catchError, firstValueFrom } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class RouteService {
  private apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

  constructor(private http: HttpClient) {}

  private async retryRequest(fn: () => Promise<any>, retries = 5, delay = 2000): Promise<any> {
    try {
      return await fn();
    } catch (error: any) {
      if (retries > 0) {
        const nextDelay = delay * 1.5;
        await new Promise(resolve => setTimeout(resolve, delay));
        return this.retryRequest(fn, retries - 1, nextDelay);
      }

      if (error.status === 503) {
        throw new Error('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
      }
      throw new Error(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞');
    }
  }

  async generateRoute(formData: any): Promise<RouteData> {
    try {
      const prompt = this.createRoutePrompt(formData);
      const headers = new HttpHeaders()
        .set('Content-Type', 'application/json')
        .set('Cache-Control', 'no-cache');

      const params = { key: environment.geminiApiKey };

      await new Promise(resolve => setTimeout(resolve, Math.random() * 1000));

      const response = await this.retryRequest(() =>
        firstValueFrom(
          this.http.post(this.apiUrl, {
            contents: [{
              parts: [{ text: prompt }]
            }],
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 2048,
            }
          }, { headers, params }).pipe(
            catchError(error => {
              if (error.status === 503) {
                throw new Error('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
              }
              throw error;
            })
          )
        )
      );

      return this.parseRouteResponse(response);
    } catch (error: any) {
      console.error('Error in generateRoute:', error);
      throw new Error(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  private createRoutePrompt(formData: any): string {
    return `–°–æ–∑–¥–∞–π –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –ú–æ—Å–∫–≤–µ. –ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º, —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞:
–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${formData.withWhom}
–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${formData.startTime}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formData.duration} —á–∞—Å–∞
–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${formData.interests.join(', ')}
–ë—é–¥–∂–µ—Ç –Ω–∞ –∫–∞—Ñ–µ: ${formData.cafeBudget}
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${formData.transportPreference}
–¢–µ–º–ø: ${formData.pace}
${formData.accessibility ? '–ù—É–∂–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ä–µ–¥–∞' : ''}
${formData.avoidCrowds ? '–ò–∑–±–µ–≥–∞—Ç—å –ª—é–¥–Ω—ã—Ö –º–µ—Å—Ç' : ''}
–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.additionalWishes}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
### –≠—Ç–∞–ø 1: [–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]
‚åö –í—Ä–µ–º—è: [–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å]
üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: [–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É–ª–∏—Ü, –ø–æ–≤–æ—Ä–æ—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: "–í—ã–π–¥—è –∏–∑ –º–µ—Ç—Ä–æ, –ø–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–æ –Ω–∞ —É–ª–∏—Ü—É X, –ø—Ä–æ–π–¥–∏—Ç–µ 200 –º–µ—Ç—Ä–æ–≤ –¥–æ Y, –¥–∞–ª–µ–µ..."]
üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: [–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è, –≤–∫–ª—é—á–∞—è –Ω–æ–º–µ—Ä–∞ –Ω—É–∂–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –º–µ—Ç—Ä–æ, –∞–≤—Ç–æ–±—É—Å–æ–≤ –∏ —Ç.–¥.]
üëÄ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: [–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–π]
- [–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]: [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –Ω–µ–π]
- [–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏]: [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –Ω–µ–π]
üç¥ –ì–¥–µ –ø–æ–µ—Å—Ç—å: [–°–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É—Ö–Ω–∏ –∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞]
- [–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è]: [–∫—É—Ö–Ω—è, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏]
- [–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è]: [–∫—É—Ö–Ω—è, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏]
üìå –°–æ–≤–µ—Ç—ã: [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞]
‚úì [–°–æ–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è]
‚úì [–°–æ–≤–µ—Ç –ø–æ –±–∏–ª–µ—Ç–∞–º/–æ—á–µ—Ä–µ–¥—è–º]
‚úì [–î—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã]
üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [55.XXXXX, 37.XXXXX]

–í–∞–∂–Ω–æ:
1. –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ —Å–µ–∑–æ–Ω
2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
3. –î–æ–±–∞–≤–ª—è–π –≤—Ä–µ–º—è –Ω–∞ –æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
4. –£—á–∏—Ç—ã–≤–∞–π –ø–µ—Ä–µ—Ä—ã–≤—ã –Ω–∞ –æ—Ç–¥—ã—Ö
5. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–ª—É—á–∞–π –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã
6. –£–∫–∞–∑—ã–≤–∞–π –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
7. –î–æ–±–∞–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã`;
  }

  private parseRouteResponse(response: any): RouteData {
    const text = response?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!text) throw new Error('Invalid API response');

    const stages = text.split('### –≠—Ç–∞–ø').filter(Boolean).map((stage: string) => {
      const timeMatch = stage.match(/‚åö –í—Ä–µ–º—è: (.+)/);
      const titleMatch = stage.match(/\d+: (.+?)\n/);
      const coordsMatch = stage.match(/üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (.+)/);
      const routeMatch = stage.match(/üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç:([^üöï]+)/s);
      const transportMatch = stage.match(/üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: (.+)/);

      const activities = [
        ...(stage.match(/üëÄ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:([^üç¥]+)/s)?.[1] || '')
          .split('\n')
          .filter(line => line.trim().startsWith('-'))
          .map(line => line.trim()),
        ...(stage.match(/üç¥ –ì–¥–µ –ø–æ–µ—Å—Ç—å:([^üìå]+)/s)?.[1] || '')
          .split('\n')
          .filter(line => line.trim().startsWith('-'))
          .map(line => line.trim())
      ];

      const tips = (stage.match(/üìå –°–æ–≤–µ—Ç—ã:([^üìç]+)/s)?.[1] || '')
        .split('\n')
        .filter(line => line.trim().startsWith('‚úì'))
        .map(line => line.trim());

      return {
        title: titleMatch?.[1].trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        time: timeMatch?.[1].trim() || '',
        description: routeMatch?.[1].trim() || '',
        transport: transportMatch?.[1].trim() || '',
        activities,
        tips,
        coordinates: this.parseCoordinates(coordsMatch?.[1] || '')
      };
    });

    return {
      stages: stages.map(({ coordinates, ...rest }: { coordinates: { lat: number, lng: number }, [key: string]: any }) => rest),
      coordinates: stages.map((stage: { coordinates: { lat: number, lng: number } }) => stage.coordinates),
      mapUrl: this.generateYandexMapsUrl(stages.map((stage: { coordinates: { lat: number, lng: number } }) => stage.coordinates))
    };
  }

  private parseCoordinates(coordString: string): { lat: number, lng: number } {
    const [lat, lng] = coordString.split(',').map(Number);
    if (isNaN(lat) || isNaN(lng)) {
      return { lat: 55.751244, lng: 37.618423 }; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    return { lat, lng };
  }

  private generateYandexMapsUrl(coordinates: Array<{lat: number, lng: number}>): string {
    if (!coordinates.length) return '';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
    const points = coordinates
      .map(coord => `${coord.lat},${coord.lng}`)
      .join('~');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    return `https://yandex.ru/maps/?rtext=${points}&rtt=pd&mode=routes&rtt=pd`;
  }
}
